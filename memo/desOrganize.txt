일단 주석 부분
* hello 초록색으로 표시 - 일반 정보 - 좀 더 중요
* ! hello 빨간색으로 표시 - 중요한 주의사항
* ? hello 파란색으로 표시 - 궁금한 사항
* TODO hello 주황색으로 표시 - 추가적으로 해야 할 일

추천 기능
ctrl + space를 누르면 제안 단어가 옆에 나오게 된다.

설명 순서 - 폴더 구조에 따름: 위에서부터 아래로 진행됨
=====client 부분 설명=====
1) assets 폴더
: css나 이미지 등의 파일을 담는 폴더
1-1) scss 파일
: scss는 일종의 스크립트 파일
일반적으로 css는 변수를 사용할 수 없지만 scss는 변수도 사용가능하다
다만 scss를 css로 변환을 시켜줘야 한다.

2) components폴더
2-1) LoginModals.js 파일
modal 창:
모들 윈도(Modal Window)는 사용자 인터페이스 디자인 개념에서 
자식 윈도에서 부모 윈도로 돌아가기 전에 사용자의 상호동작을 요구하는 창을 말한다
2-2) AppNavBar.js 파일
container 대충 크기: 1140
text-decoration-none: a tag 같은 경우 밑줄이 그어지는데 그것을 뺀 것
NavBarToggler: 브라우저 사이즈가 줄면 생기는 짝대기 3개 // 햄버거모양
Collapse: toggler를 누르면 아래에 요소들이 생기는 것 // 검색, register, login등등 navbar에 대한 내용들
Collapse의 navbar 요소의 기능: 단순히 navbar 인지 아닌지(boolean: 참 또는 거짓)를 말해주는 것
sticky-top: 스크롤을 하더라도 언제나 최상단에 고정
d-flex: flexbox라고 하는 반응형 웹 사이트를 만들 때 사용하는 박스 - grid나 flex box
justify-content-around: 콘텐츠가 양 옆으로 퍼지게 하는 것
2-3) Footer.js 파일
Row는 맨 아래 한 블럭(얇은 블럭)
reactstrap을 쓸 때 Row 다음에는 Col(column)이 와야한다
react에서는 한 줄이 있다고 하면 한 줄을 12칸(12개의 Col... 같은 느낌?)으로 나누게 된다.
span은 글자 수 만큼 공간을 차지함
<div>에다가 scss에 작성한 내용을 적용한다.
className을 이용해서 css를 적용
미리 작성해둔 CSS를 불러와서 (import) 태그에 className으로 작성하여서 사용하는 스타일 방식
m-auto: 좌 우 여백을 알아서 맞춰줌
m-옵션-auto: bootstrap 사이트에서 볼 수 있음
p: padding - 내용물 안에서 위/아래 거리를 말함
bootstrap 단위는 0.25rem
2-4) Header.js 파일
reactstrap을 참고하면서 하길 권장 - https://reactstrap.github.io/
<Col sm="12" md={{ size: 6, offset: 3 }}>.col-sm-12 .col-md-6 .offset-md-3</Col>
offset: 시작하는 칸 // 즉 3칸을 띄고 시작해라
md: 브라우저 창이 중간 사이즈일 때
sm: 브라우저 창이 작은 사이즈일 때
className: css
m-auto: margin은 알아서 해줘
2-5) Comments.js 폴더
자바스크립트 기본 함수가 에러가 난 경우에는 해당 부분을 주석 처리하고 값이 잘 넘어오는지 확인을 해봐야한다.
고유의 함수가 에러가 난 것이면 보통 값이 제대로 넘어오지 않아서 발생한 에러이기 때문이다.

3) redux 폴더
3-1) authReducer.js 파일
reducer 작성시
처음에는 기존의 state의 상태값을 가져와야 // ...state
react // 다시 작동한다
기존 것과 새로 만들어진 것에 비교해서 새로 바뀐 것만을 새로 다시 그려주거나 다시 반응하는 것을 의미
그래서 기존 것과 새로운 것이 무엇이 바뀌었는지 차이점을 알기 위해서는 비교를 해야
기존의 값을 얕은 복사를 해서 가져와야.
reducer에서는 언제나 맨 처음에는 state가 기존 것을 복사해오는 것을 먼저 적어주고 
그 다음에 변화시키고 싶은 상태값을 적는다. 
console.log() // babel 기능으로 다 지워줄 수 있다. 배포단계에서
3-2) reducers/index.js 파일
history: history는 다양한 환경에서 JavaScript의 세션 기록을 관리하기 위한 몇 가지 다른 구현을 제공한다.
“browser history” - A DOM-specific implementation, useful in web browsers that support the HTML5 history API

/**connected-react-router를 사용한 connectRouter를 router라고 명명
 * 향후에 reducer 관련된 것을 불러올 때는 router라고 이름지은 것만 불러온다고 하면
 * connectRouter(history)를 불러올 수가 있다.
 *
 * 앞으로도 router를 만든다고 하면 아래와 같은 방식으로 연결해주는 작업을 통해서
 * 프론트에서 이름만으로 불러오는 과정을 진행하게 된다.
 */
const createRootReducer = (history) =>
    combineReducers({
        router: connectRouter(history),
    });

export default createRootReducer;

3-3) authSaga.js 파일
아래의 함수가 하나의 패턴
loginUserApi()
loginUser()
watchLoginUser() -> loginUser()를 부르고 -> loginUserApi()를 부른다

제너레이터 함수: function* 함수명() {}
이 함수는 yield 함수를 사용할 수 있다.
yield: yield 키워드는 제너레이터 함수 (function* 또는  레거시 generator 함수)를 중지하거나 재개하는데 사용
function*에서 *는 generator 함수
일반 함수는 값을 하나만 반환하지만
function*는 여러 값을 반환할 수 있는 함수

takeEvery(): 매번 보고 있어라
Spawns a saga on each action dispatched to the Store that matches pattern
패턴과 일치하면 saga를 실행시켜라 이런 의미인듯
계속 감시하는데 맞는 패턴이 나오면 실행을 시켜라 이런 의미인 듯
3-4)sagas/index.js
function*에서 *는 generator 함수
일반 함수는 값을 하나만 반환하지만
function*는 여러 값을 반환할 수 있는 함수
향후에 []안에 여러가지 saga를 넣게된다.
3-5) types.js
redux에서 쓰일 상태에 관한 타입들을 정의함
redux-saga에서는 이렇게 3가지 패턴을 만들어서 프론트에서 각각 request타입을 보내주면
success 든 failure 든 선택해서 값을 반환받게 된다.

4)routes 폴더
Router.js 파일
{}는 반드시 리턴까지 써줘야
()는 {return()}이 생략된 것을 의미
<Fragment></Fragment> == <></>

원래 리액트에서는 컴포넌트를 하나밖에 못적었는데
<>를 넣어서 여러 개의 컴포넌트를 작성할 수 있도록 함

이후의 과정은 Header와 Footer를 두고 가운데 body(h1 부분)에서 스위치를 이용하여
계속 주소가 들어올 때마다 상태를 변화시켜준다

5) App.js 파일
맨 위에 store로 감싸는 이유는 우리 앱에 모든 상태 관리는 오로지 store 한 군데에서 들어갔다 나오게 된다
가장 최상위에 store를 달아준다
상태 관리는 한 쪽으로 몰아준다
대부분 맨 위는 Provider로 이름을 달아준다
그리고 history를 이용해서 router를 작동시키기 위해서
redux를 이용한 ConnectedRouter를 이용
그리고 내부에 생성한 MyRouter를 달아준다

6) store.js 파일
// history를 밖으로 내보낼 수 있도록
export const history = createBrowserHistory();

/**향후에 미들웨어를 추가한다면 배열 안에 하나씩 추가를 해주면 된다
 * connectedReactRouter를 쓰지 않으면 sagaMiddleware만 적어주게 된다.
 */
const middlewares = [sagaMiddleware, routerMiddleware(history)];

// devtools: 크롬같은 곳에서 redux로 개발을 할 때 상태가 진행되고 있는지를 볼 수 있게 도와줌
const devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;

/**개발자 도구일 때랑 배포일 때
 * 배포환경에서는 redux devtools가 보이면 웹이 어떻게 작동하는지 드러내는 일
 * 반드시 배포단계에서는 개발자 도구를 삭제해줘야 혹은 안보이도록
 */
const composeEnhancer =
    process.env.NODE_ENV === "production" ? compose : devtools || compose;

/**store를 만들어라
 * createRootReducer와 initialState와 composeEnhancer를 가지고
 */
const store = createStore(
    createRootReducer(history),
    // 웹에 모든 상태를 담고있는 초기값
    // memo 확인 - iniialState
    initialState,
    composeEnhancer(applyMiddleware(...middlewares))
);
// 생활코딩: redux
var store = Redux.createStore(reducer); 
// Redux.createStore() -> store를 생성
// Redux.createStore(reducer) -> store를 생성할 때, 꼭 필요한 인자 = reducer

reducer를 만들 때 필요한 것 
: 초기 state값과 action
==========================


=====server 부분 설명=====
7) config 폴더
7-1) config/index.js 파일
dotenv: 외부에 공개되서는 안되는 비밀스러운 값들을 dotenv라는 파일에 저장해놓고 내부에 필요한 곳에서 빼서 사용할 수 있도록

import dotenv from "dotenv";
dotenv.config();

export default {
    // 모듈화를 통해서 다른 파일에서 MONGO_URI나 JWT_SECRET이나 PORT로 불러올 수 있도록
    MONGO_URI: process.env.MONGO_URI,
    JWT_SECRET: process.env.JWT_SECRET,
    PORT: process.env.PORT,
};

8)middleware 폴더
8-1) auth.js 파일
// token 값은 브라우저 헤더에 저장이 되어있음 // 헤더에서 가져옴
const token = req.header("x-auth-token"); 

9) models 폴더
9-1) category.js 파일
posts: [
    // 한 카테고리 안에 여러 개의 글이 작성될 수 있기 때문에 배열로 설정
    {
        type: mongoose.Schema.Types.ObjectId,
        ref: "post",
        // 서로 간에 참조할 때는 반드시 ref를 이용해서 누구를 참조할 것인지
        // const Post = mongoose.model("post", PostSchema); // 여기서 "" 내부인 post를 작성한다.
    },
]
9-2) post.js 파일
category: {
    // 한 개의 post는 한 개의 카테고리가 있도록 정의해서 배열이 아닌 객체로 설정.
    type: mongoose.Schema.Types.ObjectId,
    ref: "category",
    // 서로 간에 참조할 때는 반드시 ref를 이용해서 누구를 참조할 것인지
},
comments: [
    // 댓글은 한 글에 여러 개가 달릴 수 있어서 배열로 설정
    {
        type: mongoose.Schema.Types.ObjectId,
        ref: "comment",
        // 서로 간에 참조할 때는 반드시 ref를 이용해서 누구를 참조할 것인지
    },
]
9-3) user.js 파일

comments: [
    // 모델끼리 _id를 통해서 서로 연결, 서로를 찾아줌
    // 유저 한 사람이 많은 수의 글이나 댓글을 쓸 수 있다. - 1 대 다 관계
    // 배열 구조
    {
        post_id: {
            // 얘 같은 경우에는 글을 지우게 되면 댓글도 같이 지워주는 기능을 위해서 글의 ID도 적어준다.
            type: mongoose.Schema.Types.ObjectId,
            ref: "posts",
            // 서로 간에 참조할 때는 반드시 ref를 이용해서 누구를 참조할 것인지
        },
        comment_id: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "comments",
            // 서로 간에 참조할 때는 반드시 ref를 이용해서 누구를 참조할 것인지
        },
    },
]

const User = mongoose.model("user", UserSchema);
// 향후 User 모델을 불러올 때는 user을 이용하겠다.
// "이름" 이름으로 ref를 이용하면 된다

10) routes 폴더
10-1) auth.js
// jwt secret 값 - 단순 config를 써야 secretOrPrivateKey must have a value이 에러가 나타나지 않는다/
const { JWT_SECRET } = config;

bcrypt.compare(password, user.password).then((isMatch) => {}
compare()는 결과값으로 boolean을 반환 // true 또는 false

10-2) post.js
모든 post를 검색을 하는 router를 작성
api/post/ == api/post로 된 모든 주소를 검색할 수 있게 된다.
express 서버에서 백엔드와 프론트를 같이 돌리려면 주소 체계를 다르게 해야한다.
프론트와 백엔드의 주소가 약간 달라야 프론트의 파일을 일반 유저들이 볼 수 있다
req: requst == 브라우저에서 서버 쪽으로 요청, res: response == 서버에서 브라우저 쪽으로 응답
await는 Post.find()를 다 실행할 때까지 이후의 코드를 진행하지말고 대기하라는 뜻
find() - mongoose에서 제공하는 메서드 - 모든 Post를 찾아줌
서버에서는 마지막 줄에 응답이 있어야 이것이 없으면 브라우저에서는 요청이 fail 났다고 생각하기 땜시롱
mongoose에서 제공하는 메서드를 사용한다면 async와 await를 사용해야 작동을 한다.
다른 방법으로는 exec()을 사용해서 작성한다.

// 모듈화
// export default를 하면 한 개만 내보낼 수 있는데,
// 장점으로는 다른 파일에서 해당 모듈을 사용하는데 지정하는 이름을 자유롭게 지을 수 있다
// 또한 괄호를 치지 않고 불러올 수 있다.
export default router;
// export const name = () => {}
// 이처럼 이름을 지어서 여러 개의 모듈을 내보낼 수 있다.
// 다른 파일에서 import로 불러들일 때 이름을 자유롭게 지을 수 없고
// name으로 작성한 이름으로만 불러올 수 있다.
// 또한 괄호{}안에 이름을 적어야지만 불러올 수 있다.

10-3) user.js 파일

res.json({
    token,
    user: {
        // mongo db에 들어갈 때 _id로 나타나는데 어떻게 .id로 쓰는데 되는거냐
        // _id를 바로 불러서 사용할 때 .id 형태로 사용
        id: user.id,
        name: user.name,
        email: user.email,
    },
});

mongo db에 저장할 때 나타나는 _id 필드와 user.js의 123번째 줄과 같은 .id에 관해서
mongoose는 기본적으로 스키마 각각의 _id에 대응되는 가상의 id값을 할당합니다. 

반면 _id는 기본적으로 스키마에 배정되는 값으로 우리가 일반적으로 ID라고 알고 있는 것입니다. 

즉, id는 스키마의 _id를 참조하는 값으로 

-> _id를 바로 불러서 사용할 때 .id 형태로 사용합니다. 
따라서 user.id라고 하는 것은 바로 User 모델의 _id를 바로 불러올때 사용하는 것입니다. 
그래서 아마도 user._id로 작성하시면 작동이 안되는 것을 보실 수 있을 것 입니다. _id는 바로 못불러오거든요~~

따라서 다른 method에서도 _id를 바로 불러 오실 때 .id 를 사용하실 수 있습니다. 

비밀번호 암호화 - bcrypt - hash를 편하게 이용할 수 있도록 하는 라이브러리
hash를 이용, 문장 길이가 어떻든 내용을 어떤 일정한 길이의 내용으로 변경
비밀번호에 소금을 쳐서 해커한테 털려도 알 수 없게끔. 망치는데 소금을 친다는 것에서 유래
암튼 못알아보게 하는거임
genSalt(10, ) // 10은 2^10

11) 나머지 app.js와 server.js는 해당 파일 보면 될듯

aws 버킷
{
   "Version": "2012-10-17",
   "Statement": [
       {
           "Effect": "Allow", // 사용자가 요청을 하면 허용을 할 것인지 
           "Principal": "*",
           "Action": [ // 버킷이 어떤 것을 허용할 지를 적어줌
               "s3:DeleteObject", // 지움
               "s3:GetObject", // 받기
               "s3:PutObject" // 보내기
           ],
           "Resource": "arn:aws:s3:::reactbloglec/*"
       }
   ]
}

aws cors
// 원래 source를 다른 곳에 가져오면 보안상 위험해서 기본적으로 막아놓는데 
// 막아놓은 것을 허용해주는 설정
<?xml version="1.0" encoding="UTF-8"?>
<CORSConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
<CORSRule>
   <AllowedOrigin>*</AllowedOrigin>
   <AllowedMethod>POST</AllowedMethod>
   <AllowedMethod>GET</AllowedMethod>
   <AllowedMethod>PUT</AllowedMethod>
   <AllowedMethod>DELETE</AllowedMethod>
   <AllowedMethod>HEAD</AllowedMethod>
   <AllowedHeader>*</AllowedHeader>
</CORSRule>
</CORSConfiguration>

package.json
"build:server": "babel server --out-dir build"
server 폴더를 build 해서 build 폴더에 넣도록.

server 단에서 npm build라고 치면 먼저 prebuild가 작동한다.